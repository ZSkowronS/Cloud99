{"name":"Cloud99","tagline":"Framework for Openstack High Availability Testing","body":"# OpenstackHA\r\n Framework to test the Openstack HA\r\n High availability testing is a critical aspect of certifying an Openstack cloud for \r\nproduction. But high availability testing of openstack clouds involves a combination\r\nof several aspects\r\n1. Generating an initial load on the cloud before testing starts\r\n2. Health Checks to make sure the cloud is ready for HA testing\r\n3. Running control plane/data plane scale tests in parallel with disruptions\r\n4. Active monitoring to get an idea of the impact of disruption event\r\n\r\nThis tool attempts to automate the entire flow of HA testing of \r\nOpenstack clouds. The test tool has 3 important concepts\r\n1. Monitors \r\n2. Disruptors\r\n3. Runners\r\n\r\nAll three of the above are written based on a plugin model so you can\r\nhave multiple backend plugins for each of these. For now the following \r\nplugins have been implemented but you can add your own if these dont fit\r\nyour needs. \r\n\r\nMonitors as the name suggest monitor the cloud while the Disruption event/\r\ntests are running. For now the following monitors are supported\r\na. Openstack API monitor (essentially reports nova service-list and neutron agent-list)\r\nb. Ansible host monitor (monitors that all required services are running on your openstack nodes)\r\nc. Nagios plugin monitor (Monitors your openstack nodes if nagios is enabled. Always monitors Openstack\r\npre-defined application VMs)\r\n\r\nDisruptors as the name suggest disrupts the Openstack services/Nodes. For now\r\nthe following disruptors are supported\r\na. Node disruptor (reboots nodes like compute, network, controller etc)\r\nb. Process disruptor (disrupts/kills openstack services on specific nodes)\r\nc. Container disruptor (disrupts containers in environments like kolla openstack installations)\r\n \r\nRunners are a critical part which actually runs scale/functionality tests while\r\ndisruption is happening. For now the following runners are supported\r\na. Rally runner (provide a pointer to your rally scenario file)\r\n\r\nThe way the framework works is it spawns seperate threads for each runner, monitor and disruptor\r\nand performs all these in parallel. So for example you can do things like\r\nPerform a VM boot test and in parallel stop openstack nova scheduler service for instance\r\nand assess the impact through monitoring\r\n\r\nHow to run/use the tool (User View)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}